@{
    ViewData["Title"] = "Home Page";
}

<br />
<div class="container">
    <input type="button" id="qtLogin" value="Login To Questrade" disabled />

    <textarea id="accounts" readonly></textarea>
</div>

<!--Reference the SignalR library. -->
<script>
    if (typeof Promise === 'undefined') {
        document.write('<script type="text/javascript" src="/lib/signalr/signalr-clientES5-1.0.0-alpha2-final.js"><\/script>');
    }
    else {
        document.write('<script type="text/javascript" src="/lib/signalr/signalr-client-1.0.0-alpha2-final.js"><\/script>');
    }
</script>

<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function ()
    {
        var email = prompt('Enter your Email:', '');
        var loginUrl = '';

        document.getElementById('qtLogin').addEventListener('click', function (event)
        {
            window.open(loginUrl, '_blank', 'width=800,height=600');
        });

        startConnection('/trader', email, function (connection) {

            connection.on('recievedLoginUrl', function (response) {
                if (response.success) {
                    loginUrl = response.payload;
                    document.getElementById('qtLogin').disabled = false;
                }
            });

            connection.on('recievedAuthToken', function (response) {
                connection.invoke('RequestAccounts');
            });

            connection.on('recievedAccounts', function (response) {
                document.getElementById('accounts').value = response;            
            });

        })
        .then(function (connection) {
            console.log('connection started');

            //document.getElementById('sendmessage').addEventListener('click', function (event) {
            //    // Call the Send method on the hub.
            //    connection.invoke('send', name, messageInput.value);

            //    // Clear text box and reset focus for next comment.
            //    messageInput.value = '';
            //    messageInput.focus();
            //    event.preventDefault();
            //});
        })
        .catch(error => {
            console.error(error.message);
        });


        // Starts a connection with transport fallback - if the connection cannot be started using
        // the webSockets transport the function will fallback to the serverSentEvents transport and
        // if this does not work it will try longPolling. If the connection cannot be started using
        // any of the available transports the function will return a rejected Promise.
        function startConnection(url, email, configureConnection)
        {
            return function start(transport)
            {
                console.log(`Starting connection using ${signalR.TransportType[transport]} transport`)

                url = url + "?email=" + email;
                var connection = new signalR.HubConnection(url, { transport: transport });

                if (configureConnection && typeof configureConnection === 'function') {
                    configureConnection(connection);
                }

                return connection.start()
                    .then(function ()
                    {
                        return connection;
                    })
                    .catch(function (error)
                    {
                        console.log(`Cannot start the connection use ${signalR.TransportType[transport]} transport. ${error.message}`);
                        if (transport !== signalR.TransportType.LongPolling) {
                            return start(transport + 1);
                        }

                        return Promise.reject(error);
                    });
            }(signalR.TransportType.WebSockets);
        }
    });
</script>